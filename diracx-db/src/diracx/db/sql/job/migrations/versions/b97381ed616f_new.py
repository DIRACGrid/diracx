"""new

Revision ID: b97381ed616f
Revises: 79fce7dece6a
Create Date: 2025-07-01 12:41:17.490790

"""

from __future__ import annotations

from typing import Sequence, Union

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "b97381ed616f"
down_revision: Union[str, Sequence[str], None] = "79fce7dece6a"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

from diracx.db.sql.utils.alembic import Trigger

trg_Jobs_insert = Trigger(
    name="trg_Jobs_insert",
    when="AFTER",
    action="INSERT",
    table="Jobs",
    time="FOR EACH ROW",
    body="        INSERT INTO JobsHistorySummary (\n            Status, Site, Owner, OwnerGroup, VO, JobGroup, JobType,\n            ApplicationStatus, MinorStatus, JobCount, RescheduleSum\n        )\n        VALUES (\n            NEW.Status, NEW.Site, NEW.Owner, NEW.OwnerGroup, NEW.VO,\n            NEW.JobGroup, NEW.JobType, NEW.ApplicationStatus,\n            NEW.MinorStatus, 1, NEW.RescheduleCounter\n        )\n        ON DUPLICATE KEY UPDATE JobCount = JobCount + 1,\n            RescheduleSum = RescheduleSum + NEW.RescheduleCounter;",
)
trg_Jobs_delete = Trigger(
    name="trg_Jobs_delete",
    when="AFTER",
    action="DELETE",
    table="Jobs",
    time="FOR EACH ROW",
    body="        UPDATE JobsHistorySummary\n        SET JobCount = JobCount - 1, RescheduleSum = RescheduleSum - OLD.RescheduleCounter\n        WHERE Status = OLD.Status\n            AND Site = OLD.Site\n            AND Owner = OLD.Owner\n            AND OwnerGroup = OLD.OwnerGroup\n            AND VO = OLD.VO\n            AND JobGroup = OLD.JobGroup\n            AND JobType = OLD.JobType\n            AND ApplicationStatus = OLD.ApplicationStatus\n            AND MinorStatus = OLD.MinorStatus;\n\n        -- Remove zero rows\n        DELETE FROM JobsHistorySummary\n        WHERE JobCount = 0\n            AND Status = OLD.Status\n            AND Site = OLD.Site\n            AND Owner = OLD.Owner\n            AND OwnerGroup = OLD.OwnerGroup\n            AND VO = OLD.VO\n            AND JobGroup = OLD.JobGroup\n            AND JobType = OLD.JobType\n            AND ApplicationStatus = OLD.ApplicationStatus\n            AND MinorStatus = OLD.MinorStatus;",
)
trg_Jobs_update_status = Trigger(
    name="trg_Jobs_update_status",
    when="AFTER",
    action="UPDATE",
    table="Jobs",
    time="FOR EACH ROW",
    body="        IF OLD.Status != NEW.Status THEN\n\n        -- Decrease count from old status\n        UPDATE JobsHistorySummary\n        SET JobCount = JobCount - 1, RescheduleSum = RescheduleSum - OLD.RescheduleCounter\n        WHERE Status = OLD.Status\n        AND Site = OLD.Site\n        AND Owner = OLD.Owner\n        AND OwnerGroup = OLD.OwnerGroup\n        AND VO = OLD.VO\n        AND JobGroup = OLD.JobGroup\n        AND JobType = OLD.JobType\n        AND ApplicationStatus = OLD.ApplicationStatus\n        AND MinorStatus = OLD.MinorStatus;\n\n        -- Delete row if count drops to zero\n        DELETE FROM JobsHistorySummary WHERE JobCount = 0;\n\n        -- Increase count for new status\n        INSERT INTO JobsHistorySummary (\n            Status, Site, Owner, OwnerGroup, JobGroup, VO,\n            JobType, ApplicationStatus, MinorStatus, JobCount, RescheduleSum\n        )\n        VALUES (\n            NEW.Status, NEW.Site, NEW.Owner, NEW.OwnerGroup, NEW.JobGroup,\n            NEW.VO, NEW.JobType, NEW.ApplicationStatus, NEW.MinorStatus,\n            1, NEW.RescheduleCounter\n        )\n        ON DUPLICATE KEY UPDATE JobCount = JobCount + 1,\n            RescheduleSum = RescheduleSum + NEW.RescheduleCounter;\n\n        END IF;",
)


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_trigger(trg_Jobs_insert)
    op.create_trigger(trg_Jobs_delete)
    op.create_trigger(trg_Jobs_update_status)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_trigger(trg_Jobs_update_status)
    op.drop_trigger(trg_Jobs_delete)
    op.drop_trigger(trg_Jobs_insert)
    # ### end Alembic commands ###
